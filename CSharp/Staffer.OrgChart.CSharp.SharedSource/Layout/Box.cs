using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace Staffer.OrgChart.Layout.CSharp
{
    /// <summary>
    /// A box in some <see cref="Diagram"/>. Has <see cref="Frame"/> and layout-related config such as <see cref="LayoutStrategyId"/>.
    /// This is a purely visual object, created based on underlying chart's data.
    /// </summary>
    [DebuggerDisplay("{Id}, {Frame.Exterior.TopLeft.X}:{Frame.Exterior.TopLeft.Y}, {Frame.Exterior.Size.Width}x{Frame.Exterior.Size.Height}")]
    public class Box
    {
        /// <summary>
        /// Value to be used for box identifier to indicate an absent box.
        /// </summary>
        public const int None = -1;

        /// <summary>
        /// Identifier of this box. Unique in the scope of the parent <see cref="BoxContainer"/>.
        /// </summary>
        [NotNull] public readonly int Id;
        /// <summary>
        /// Identifier of the parent box, usually driven by corresponding relationship between underlying data items.
        /// This parent is for the visual connections and arrangement of children boxes with their parents.
        /// </summary>
        [NotNull] public int VisualParentId;

        /// <summary>
        /// Identifier of some externally provided data item for which this box was created.
        /// Can be null for auto-generated boxes and manually added boxes.
        /// </summary>
        [CanBeNull] public readonly string DataId;

        /// <summary>
        /// This box has been auto-generated for layout purposes,
        /// so it can be deleted and re-created as needed.
        /// </summary>
        public readonly bool IsAutoGenerated;

        /// <summary>
        /// Layout strategy that should be used to apply layout on this Box and its children.
        /// References an element in <see cref="DiagramLayoutSettings.LayoutStrategies"/>.
        /// If <c>null</c>, use settings.
        /// </summary>
        [CanBeNull] public string LayoutStrategyId;

        /// <summary>
        /// Bounding box.
        /// </summary>
        [NotNull] public readonly Frame Frame;

        /// <summary>
        /// When <c>true</c>, layout operations can be applied only to this box.
        /// Its children will not participate in the layout.
        /// </summary>
        public bool IsCollapsed;
        
        /// <summary>
        /// <c>true</c> is this box is bound to some data item.
        /// </summary>
        public bool IsDataBound => !string.IsNullOrEmpty(DataId);

        /// <summary>
        /// Ctr. for normal and data-bound boxes.
        /// </summary>
        public Box(int id, [CanBeNull]string dataId)
        {
            if (id == 0)
            {
                throw new ArgumentOutOfRangeException(nameof(id));
            }

            Id = id;
            DataId = dataId;
            Frame = new Frame();
        }

        /// <summary>
        /// Ctr. for auto-generated boxes.
        /// </summary>
        public Box (int id, bool isAutoGenerated) : this(id, null)
        {
            IsAutoGenerated = isAutoGenerated;
        }
    }
}